{"version":3,"sources":["components/Service/moviesService.js","components/SearchForm/SerchForm.jsx","pages/MoviesPage/MoviesPage.jsx"],"names":["instance","axios","create","baseURL","params","api_key","getTrendsMovies","get","getSearchsMovies","query","getMovieById","movieId","getCastById","getReviewsById","SerchForm","state","handleChange","e","setState","currentTarget","value","handleSubmit","preventDefault","props","onSubmit","this","type","autoComplete","autoFocus","placeholder","onChange","Component","MoviesList","lazy","MoviesPage","movies","error","loading","onChangeQuery","console","log","then","response","data","results","catch","fallback"],"mappings":"yIAAA,sLAEMA,EAFN,OAEiBC,EAAMC,OAAO,CAC1BC,QAAS,gCACTC,OAAQ,CACJC,QAAS,sCAKJC,EAAkB,WAC7B,OAAON,EAASO,IAAT,qBAGIC,EAAmB,SAACC,GAC/B,OAAOT,EAASO,IAAT,6BAAmCE,KAG/BC,EAAe,SAACC,GAC3B,OAAOX,EAASO,IAAT,gBAAsBI,KAGlBC,EAAc,SAACD,GAC1B,OAAOX,EAASO,IAAT,gBAAsBI,EAAtB,cAGIE,EAAiB,SAACF,GAC7B,OAAOX,EAASO,IAAT,gBAAsBI,EAAtB,e,yICQMG,E,4MA/BXC,MAAQ,CAAEN,MAAO,I,EAEjBO,aAAe,SAAAC,GACX,EAAKC,SAAS,CAAET,MAAOQ,EAAEE,cAAcC,S,EAE3CC,aAAe,SAAAJ,GACXA,EAAEK,iBACF,EAAKC,MAAMC,SAAS,EAAKT,MAAMN,OAC/B,EAAKS,SAAS,CAAET,MAAO,M,4CAG3B,WACI,IAAQY,EAA+BI,KAA/BJ,aAAcL,EAAiBS,KAAjBT,aACtB,OACI,8BACA,uBAAMQ,SAAUH,EAAhB,UACQ,uBACIK,KAAK,OACJC,aAAa,MACbC,WAAS,EACTC,YAAY,mIACbT,MAAOK,KAAKV,MAAMN,MAClBqB,SAAUd,IACd,wBAAQU,KAAK,SAAb,0F,GAxBIK,aCElBC,EAAaC,gBAAK,kBAAM,gCA0DfC,E,4MAvDXnB,MAAQ,CACJN,MAAO,GACP0B,OAAQ,GACRC,MAAO,KACPC,SAAS,G,EAuBbC,cAAgB,SAAE7B,GACT,EAAKS,SAAS,CACXT,QACA0B,OAAQ,GACRE,SAAS,K,wDAxBrB,WAAsB,IAAD,OACjB,EAA2BZ,KAAKV,MAAxBN,EAAR,EAAQA,MAAO4B,EAAf,EAAeA,QACfE,QAAQC,IAAI/B,GACR4B,GACA7B,YAAiBC,GACZgC,MAAK,SAAAC,GACF,EAAKxB,SAAS,CACViB,OAAQO,EAASC,KAAKC,QACtBP,SAAS,OAGhBQ,OAAM,SAAAT,GACH,EAAKlB,SAAS,CACVmB,SAAS,EACTD,e,oBAcpB,WACI,MAAiCX,KAAKV,MAA/BsB,EAAP,EAAOA,QAASD,EAAhB,EAAgBA,MAAOD,EAAvB,EAAuBA,OACvB,OACI,qCACI,cAAC,EAAD,CAAYX,SAAUC,KAAKa,gBAC1B,gCACAD,GAAW,mDACXD,GAAS,qLACRC,IAAYD,GACd,cAAC,WAAD,CAAUU,SAAU,4CAApB,SACI,cAACd,EAAD,CAAYG,OAAQA,gB,GA9CfJ","file":"static/js/9.228833a3.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3/\",\r\n    params: {\r\n        api_key: \"9f716f4578fffd91065817179e197459\"\r\n    }\r\n})\r\n\r\n// https://api.themoviedb.org/3/trending/all/day?api_key=<<api_key>>\r\nexport const getTrendsMovies = () => {\r\n  return instance.get(`trending/all/day`);\r\n};\r\n\r\nexport const getSearchsMovies = (query) => {\r\n  return instance.get(`search/movie?query=${query}`);\r\n};\r\n\r\nexport const getMovieById = (movieId) => {\r\n  return instance.get(`movie/${movieId}`);\r\n};\r\n\r\nexport const getCastById = (movieId) => {\r\n  return instance.get(`movie/${movieId}/credits`);\r\n};\r\n\r\nexport const getReviewsById = (movieId) => {\r\n  return instance.get(`movie/${movieId}/reviews`);\r\n};\r\n\r\n\r\n\r\n","import React, { Component } from 'react'\r\n\r\n\r\nclass SerchForm extends Component {\r\n    state = { query: '' }\r\n    \r\n    handleChange = e => {\r\n        this.setState({ query: e.currentTarget.value });\r\n    }\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.onSubmit(this.state.query);\r\n        this.setState({ query: '' });\r\n}\r\n\r\n    render() {\r\n        const { handleSubmit, handleChange } = this;\r\n        return (\r\n            <div>\r\n            <form onSubmit={handleSubmit}>\r\n                    <input\r\n                        type=\"text\"\r\n                         autoComplete=\"off\"\r\n                         autoFocus\r\n                         placeholder=\"Введите название фильма\"\r\n                        value={this.state.query}\r\n                        onChange={handleChange}/>\r\n                    <button type=\"submit\">Поиск фильма</button>\r\n            </form>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SerchForm","import React, {Component, lazy, Suspense} from 'react';\r\n\r\nimport { getSearchsMovies } from \"../../components/Service/moviesService\"\r\nimport SearchForm from \"../../components/SearchForm\"\r\n\r\nconst MoviesList = lazy(() => import (\"../../components/MoviesList\"));\r\n\r\nclass MoviesPage extends Component {\r\n    state = {\r\n        query: \"\",\r\n        movies: [],\r\n        error: null,\r\n        loading: false\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        const { query, loading } = this.state;\r\n        console.log(query)\r\n        if (loading) {\r\n            getSearchsMovies(query)\r\n                .then(response => {\r\n                    this.setState({\r\n                        movies: response.data.results,\r\n                        loading: false\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    this.setState({\r\n                        loading: false,\r\n                        error\r\n                    })\r\n                })\r\n        }\r\n    }\r\n\r\n    onChangeQuery = ( query ) => {\r\n             this.setState({\r\n                query,\r\n                movies: [],\r\n                loading: true})\r\n        }\r\n   \r\n\r\n    render() {\r\n        const {loading, error, movies} = this.state;\r\n        return (\r\n            <>\r\n                <SearchForm onSubmit={this.onChangeQuery} />\r\n                 <div>\r\n                {loading && <p>Movies loading ...</p>}\r\n                {error && <p>Не удалось загрузить фильмы</p>}\r\n                {!loading && !error && \r\n                <Suspense fallback={<p>Loading ...</p>}>\r\n                    <MoviesList movies={movies} />\r\n                </Suspense>}\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default MoviesPage;"],"sourceRoot":""}